# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := vosk
### Rules for action "swig":
quiet_cmd_binding_gyp_vosk_target_swig = ACTION binding_gyp_vosk_target_swig $@
cmd_binding_gyp_vosk_target_swig = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; swig -c++ -javascript -o vosk_wrap.cc -v8 "-DV8_MAJOR_VERSION=10" ./vosk/src/vosk.i

vosk_wrap.cc: obj := $(abs_obj)
vosk_wrap.cc: builddir := $(abs_builddir)
vosk_wrap.cc: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
vosk_wrap.cc: export BUILT_PRODUCTS_DIR := ${abs_builddir}
vosk_wrap.cc: export CONFIGURATION := ${BUILDTYPE}
vosk_wrap.cc: export DYLIB_INSTALL_NAME_BASE := @rpath
vosk_wrap.cc: export EXECUTABLE_NAME := vosk.node
vosk_wrap.cc: export EXECUTABLE_PATH := vosk.node
vosk_wrap.cc: export FULL_PRODUCT_NAME := vosk.node
vosk_wrap.cc: export LD_DYLIB_INSTALL_NAME := @rpath/vosk.node
vosk_wrap.cc: export MACH_O_TYPE := mh_bundle
vosk_wrap.cc: export PRODUCT_NAME := vosk
vosk_wrap.cc: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
vosk_wrap.cc: export SDKROOT := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk
vosk_wrap.cc: export SRCROOT := ${abs_srcdir}/
vosk_wrap.cc: export SOURCE_ROOT := ${SRCROOT}
vosk_wrap.cc: export TARGET_BUILD_DIR := ${abs_builddir}
vosk_wrap.cc: export TEMP_DIR := ${TMPDIR}
vosk_wrap.cc: TOOLSET := $(TOOLSET)
vosk_wrap.cc: $(srcdir)/vosk/src/vosk.i FORCE_DO_CMD
	$(call do_cmd,binding_gyp_vosk_target_swig)

all_deps += vosk_wrap.cc
action_binding_gyp_vosk_target_swig_outputs := vosk_wrap.cc


DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=vosk' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-DV8_DEPRECATION_WARNINGS' \
	'-DV8_IMMINENT_DEPRECATION_WARNINGS' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.13 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++11 \
	-stdlib=libc++ \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/include/node \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/src \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/openssl/config \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/openssl/openssl/include \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/uv/include \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/zlib \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/v8/include \
	-I/home/user/kaldi/src \
	-I/home/user/kaldi/tools/openfst/include \
	-I/vosk/src

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=vosk' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-DV8_DEPRECATION_WARNINGS' \
	'-DV8_IMMINENT_DEPRECATION_WARNINGS' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-O3 \
	-gdwarf-2 \
	-mmacosx-version-min=10.13 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++11 \
	-stdlib=libc++ \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/include/node \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/src \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/openssl/config \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/openssl/openssl/include \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/uv/include \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/zlib \
	-I/Users/gauravgarg/Library/Caches/node-gyp/14.13.1/deps/v8/include \
	-I/home/user/kaldi/src \
	-I/home/user/kaldi/tools/openfst/include \
	-I/vosk/src

OBJS := \
	$(obj).target/$(TARGET)/vosk/src/kaldi_recognizer.o \
	$(obj).target/$(TARGET)/vosk/src/model.o \
	$(obj).target/$(TARGET)/vosk/src/language_model.o \
	$(obj).target/$(TARGET)/vosk/src/spk_model.o \
	$(obj).target/$(TARGET)/vosk/src/vosk_api.o \
	$(obj).target/$(TARGET)/vosk_wrap.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our actions/rules run before any of us.
$(OBJS): | $(action_binding_gyp_vosk_target_swig_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(builddir)/vosk.node: | $(action_binding_gyp_vosk_target_swig_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_vosk_target_swig_outputs): | 

LDFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.13 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++ \
	-L/usr/lib

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.13 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++ \
	-L/usr/lib

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LIBS := \
	/home/user/kaldi/src/online2/kaldi-online2.a \
	/home/user/kaldi/src/decoder/kaldi-decoder.a \
	/home/user/kaldi/src/ivector/kaldi-ivector.a \
	/home/user/kaldi/src/gmm/kaldi-gmm.a \
	/home/user/kaldi/src/nnet3/kaldi-nnet3.a \
	/home/user/kaldi/src/tree/kaldi-tree.a \
	/home/user/kaldi/src/feat/kaldi-feat.a \
	/home/user/kaldi/src/lat/kaldi-lat.a \
	/home/user/kaldi/src/lm/kaldi-lm.a \
	/home/user/kaldi/src/hmm/kaldi-hmm.a \
	/home/user/kaldi/src/transform/kaldi-transform.a \
	/home/user/kaldi/src/cudamatrix/kaldi-cudamatrix.a \
	/home/user/kaldi/src/matrix/kaldi-matrix.a \
	/home/user/kaldi/src/fstext/kaldi-fstext.a \
	/home/user/kaldi/src/util/kaldi-util.a \
	/home/user/kaldi/src/base/kaldi-base.a \
	/home/user/kaldi/tools/openfst/lib/libfst.a \
	/home/user/kaldi/tools/openfst/lib/libfstngram.a \
	/home/user/kaldi/tools/OpenBLAS/libopenblas.a

$(builddir)/vosk.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/vosk.node: LIBS := $(LIBS)
$(builddir)/vosk.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/vosk.node: TOOLSET := $(TOOLSET)
$(builddir)/vosk.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/vosk.node
# Add target alias
.PHONY: vosk
vosk: $(builddir)/vosk.node

# Short alias for building this executable.
.PHONY: vosk.node
vosk.node: $(builddir)/vosk.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/vosk.node

